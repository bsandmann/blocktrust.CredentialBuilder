@using Blocktrust.CredentialBuilder.Client.Models
@using Blocktrust.CredentialBuilder.Client.Models.Connections
@using Blocktrust.CredentialBuilder.Client.Components.Helpers
@using Blocktrust.CredentialBuilder.Client.Services
@inject IConnectionService ConnectionService;
@inject ISnackbar Snackbar


<MudPaper Class="pa-2">
    @if (_action == EnumConnectionAction.None)
    {
        <MudStack>
            <MudText Typo="Typo.subtitle2">Create new connection</MudText>
            <MudButton Class="my-2" Variant="Variant.Filled" OnClick="CreateOobInvitation" StartIcon="@Icons.Material.Filled.QrCode">Create Out of Band inivation</MudButton>
            <MudButton Class="my-2" Variant="Variant.Filled" OnClick="ShowAcceptOobInvitation" StartIcon="@Icons.Material.Filled.QrCodeScanner">Accept Out of Band inivation</MudButton>
        </MudStack>
    }
    else if (_action == EnumConnectionAction.InvitationGenerated)
    {
        <MudStack Class="mt-2">
            @((MarkupString)OobInvitation.QrCodeSvg)
            <MudStack Row="true">
                <MudText Typo="Typo.subtitle2">Invitation:</MudText>
                <MudText Typo="Typo.body1">
                    <Ellipsis StringContent="@OobInvitation.InvitationUrl" StringLength="20" IncludeCopyIcon="true"/>
                </MudText>
            </MudStack>
            <MudStack Row="true">
                <MudText Typo="Typo.subtitle2">InvitationId:</MudText>
                <MudText Typo="Typo.body2">@OobInvitation.InvitationId</MudText>
            </MudStack>
            <MudStack Row="true">
                <MudText Typo="Typo.subtitle2">LocalDID (from):</MudText>
                <MudText Typo="Typo.body2">
                    <Ellipsis StringContent="@OobInvitation.LocalDid" StringLength="20" IncludeCopyIcon="true"></Ellipsis>
                </MudText>
            </MudStack>
            <MudStack>
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mt-2"/>
                <MudText Typo="Typo.body2">
                    <em>Watiting for connection</em>
                </MudText>
            </MudStack>
        </MudStack>
    }
    else if (_action == EnumConnectionAction.ReadyToAcceptInvitation)
    {
        <MudStack Class="mt-2">
            <MudText Typo="Typo.body2">Paste the invitation here</MudText>
            <MudTextField @bind-Value="@InvitationLink" Label="Paste the invitation here" Style="font-weight:300;" Variant="Variant.Text"/>
            <MudButton Class="my-2" Variant="Variant.Filled" OnClick="AcceptOobInvitation" StartIcon="@Icons.Material.Filled.QrCodeScanner">Accept</MudButton>
        </MudStack>
    }
    else if (_action == EnumConnectionAction.ConnectionRequestSent)
    {
        // After sending the request we have all the data of the other party but
        // (but we are still waiting for the response)
        <MudStack Class="mt-2">
            <MudStack Row="true">
                <MudText Typo="Typo.subtitle2">ConnectionId:</MudText>
                <MudText Typo="Typo.body2">@AcceptedInvitation.ConnectionId</MudText>
            </MudStack>
            <MudStack Row="false">
                <MudText Typo="Typo.subtitle2">InvitationId:</MudText>
                <MudText Typo="Typo.body2">@AcceptedInvitation.InvitationId</MudText>
            </MudStack>
            <MudStack Row="true">
                <MudText Typo="Typo.subtitle2">Local PeerDID:</MudText>
                <MudText Typo="Typo.body2">
                    <Ellipsis StringContent="@AcceptedInvitation.LocalPeerDid" StringLength="20" IncludeCopyIcon="true"></Ellipsis>
                </MudText>
            </MudStack>
            <MudStack Row="true">
                <MudText Typo="Typo.subtitle2">Remote PeerDID::</MudText>
                <MudText Typo="Typo.body2">
                    <Ellipsis StringContent="@AcceptedInvitation.RemotePeerDid" StringLength="20" IncludeCopyIcon="true"></Ellipsis>
                </MudText>
            </MudStack>
            <MudStack Row="true">
                <MudText Typo="Typo.subtitle2">State:</MudText>
                <MudText Typo="Typo.body2">@AcceptedInvitation.State.ToString()</MudText>
            </MudStack>
            <MudStack>
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mt-2"/>
                <MudText Typo="Typo.body2">
                    <em>Watiting for connection confirmation</em>
                </MudText>
            </MudStack>
        </MudStack>
    }
    else if (_action == EnumConnectionAction.ConnectionResponseSent)
    {
        <MudStack Class="mt-2">
            <MudStack Row="true">
                <MudIcon Color="Color.Success" Icon="@Icons.Material.Filled.Check"></MudIcon>
                <MudText Typo="Typo.body2">Connection established (from the perspective of the inviter)</MudText>
            </MudStack>
        </MudStack>
    }
    else if (_action == EnumConnectionAction.ConnectionResponseReceived)
    {
        <MudStack Class="mt-2">
            <MudStack Row="true">
                <MudIcon Color="Color.Success" Icon="@Icons.Material.Filled.Check"></MudIcon>
                <MudText Typo="Typo.body2">Connection established (from the perspective of the invitee)</MudText>
            </MudStack>
        </MudStack>
    }
    else if (_action == EnumConnectionAction.TimeoutOrFailed)
    {
        <MudStack Class="mt-2">
            <MudStack Row="true">
                <MudIcon Color="Color.Error" Icon="@Icons.Material.Filled.Error"></MudIcon>
                <MudText Typo="Typo.body2">An error occured or it timed out</MudText>
            </MudStack>
        </MudStack>
    }

</MudPaper>

@code {

    [Parameter]
    public Agent Agent { get; set; }

    OobInvitation? OobInvitation { get; set; } = null;

    AcceptedInvitation? AcceptedInvitation { get; set; } = null;

    EnumConnectionAction _action = EnumConnectionAction.None;

    string? InvitationLink { get; set; }

    // The inviter creates a QR-code containing
    // The QR code is created. We have to force a refresh of the UI, so that it shows
    // Then the inviter waits for the invitee to accept the invitation
    // If the inviter gets the expected message, it will also automatically return a response
    private async Task CreateOobInvitation()
    {
        var oobInvitationResult = await ConnectionService.CreateOobInvitation(Agent, "myLabel");
        if (oobInvitationResult.IsFailed)
        {
            Snackbar.Add(oobInvitationResult.Errors.First().Message, Severity.Error);
            return;
        }
        OobInvitation = oobInvitationResult.Value;
        _action = EnumConnectionAction.InvitationGenerated;

        StateHasChanged();

        var flowCompleted = await ConnectionService.WaitOobInvitationResponse(Agent, OobInvitation.InvitationId);

        if (flowCompleted)
        {
            _action = EnumConnectionAction.ConnectionResponseSent;
        }
        else
        {
            _action = EnumConnectionAction.TimeoutOrFailed;
        }
    }

    // The invitee scans the QR-code and accepts the invitation
    // And sends a response
    private async Task AcceptOobInvitation()
    {
        if (string.IsNullOrEmpty(InvitationLink))
        {
            return;
        }

        var acceptResult = await ConnectionService.AcceptOobInvitation(Agent, InvitationLink);
        if (acceptResult.IsFailed)
        {
            Snackbar.Add(acceptResult.Errors.First().Message, Severity.Error);
            return;
        }
        _action = EnumConnectionAction.ConnectionRequestSent;
        AcceptedInvitation = acceptResult.Value;

        StateHasChanged();

        var flowCompleted = await ConnectionService.WaitForConnectionConfirmation(Agent, AcceptedInvitation.InvitationId);

        if (flowCompleted)
        {
            _action = EnumConnectionAction.ConnectionResponseReceived;
        }
        else
        {
            _action = EnumConnectionAction.TimeoutOrFailed;
        }
    }

    private void ShowAcceptOobInvitation()
    {
        _action = EnumConnectionAction.ReadyToAcceptInvitation;
    }

}