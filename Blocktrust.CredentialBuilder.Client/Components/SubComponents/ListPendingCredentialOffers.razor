@using Blocktrust.CredentialBuilder.Client.Models
@using Blocktrust.CredentialBuilder.Client.Components.Helpers
@using Blocktrust.CredentialBuilder.Client.Models.Credentials
@using Blocktrust.CredentialBuilder.Client.Services
@using Blocktrust.PrismAgentApi.Model
@inject ICredentialIssuingService CredentialIssuingService
@inject ISnackbar Snackbar

<MudPaper Class="pa-3">
    <MudStack Row="true" Class="mb-3">
        <MudText Typo="Typo.subtitle2">
            Pending Credential Offers (last 3h)
        </MudText>
        <MudSpacer/>
        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Refresh" @onclick="RefreshReceivedCredentialOffers"></MudIconButton>
    </MudStack>
    @foreach (var receivedCredentialOffer in ReceivedCredentialOffers)
    {
        <MudPaper Class="pa-3 mb-2">
            <MudStack>
                <MudStack Row="true">
                    <MudText Typo="Typo.body2">
                        <strong>
                            RecordId
                        </strong>
                    </MudText>
                    <MudText Typo="Typo.body2">
                        @receivedCredentialOffer.RecordId
                    </MudText>
                </MudStack>
                <MudStack Row="true">
                    <MudText Typo="Typo.body2">
                        <strong>
                            Issuer (EMPTY / PRISM BUG?)
                        </strong>
                    </MudText>
                    <MudText Typo="Typo.body2">
                        @receivedCredentialOffer.IssuerDid
                    </MudText>
                </MudStack>
                <MudStack Row="true">
                    <MudText Typo="Typo.body2">
                        <strong>
                            Subject (EMPTY / PRISM BUG?)
                        </strong>
                    </MudText>
                    <MudText Typo="Typo.body2">
                        @receivedCredentialOffer.SubjectDid
                    </MudText>
                </MudStack>
                <MudStack Row="true">
                    <MudText Typo="Typo.body2">
                        <strong>
                            Created
                        </strong>
                    </MudText>
                    <MudText Typo="Typo.body2">
                        @receivedCredentialOffer.CreatedAt.ToLocalTime()
                    </MudText>
                </MudStack>
                @if (!string.IsNullOrEmpty(receivedCredentialOffer.SchemaId))
                {
                    <MudStack Row="true">
                        <MudText Typo="Typo.body2">
                            <strong>
                                SchemaId
                            </strong>
                        </MudText>
                        <MudText Typo="Typo.body2">
                            @receivedCredentialOffer.SchemaId
                        </MudText>
                    </MudStack>
                }
                @if (!receivedCredentialOffer.ValidityPeriod.Equals(0M))
                {
                    <MudStack Row="true">
                        <MudText Typo="Typo.body2">
                            <strong>
                                Offer valid until
                            </strong>
                        </MudText>
                        <MudText Typo="Typo.body2">
                            @(receivedCredentialOffer.CreatedAt + TimeSpan.FromSeconds((double)receivedCredentialOffer.ValidityPeriod)).toLongDateString()
                        </MudText>
                    </MudStack>
                }
                <MudGrid Spacing="1">
                    @foreach (var claim in receivedCredentialOffer.Claims)
                    {
                        <MudItem xs="6">
                            <MudText Style="border-width: 1px !important; overflow-wrap: anywhere;" Typo="Typo.body2" Class="border-dotted border-2 mud-border-info grey lighten-5 rounded py-2 px-3">
                                <strong>@claim.Key</strong>
                            </MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <MudText Style="border-width: 1px !important; overflow-wrap: anywhere;" Class=" border-dotted border-2 mud-border-info grey lighten-5 rounded py-2 px-3" Typo="Typo.body2">@claim.Value</MudText>
                        </MudItem>
                    }
                </MudGrid>
                @* <MudText Typo="Typo.body2"> *@
                @*     JWT: *@
                @*     @receivedCredentialOffer.JwtCredential *@
                @* </MudText> *@
                <MudDivider/>
                <MudStack Row="true">
                    <MudSpacer/>
                    <MudButton Variant="Variant.Outlined" OnClick="() => AcceptCredentialOffer(receivedCredentialOffer)">Accept Offer</MudButton>
                </MudStack>
            </MudStack>
        </MudPaper>
    }
</MudPaper>

@code {

    [Parameter]
    public Agent Agent { get; set; }

    public List<CreatedCredentialOffer> ReceivedCredentialOffers { get; set; } = new List<CreatedCredentialOffer>();

    private async Task RefreshReceivedCredentialOffers()
    {
        var listReceivedCredentialOffersResult = await CredentialIssuingService.GetListCredentialOffers(Agent, IssueCredentialRecord.ProtocolStateEnum.OfferReceived, TimeSpan.FromHours(3));
        if (listReceivedCredentialOffersResult.IsFailed)
        {
            Snackbar.Add(listReceivedCredentialOffersResult.Errors.First().Message, Severity.Error);
            return;
        }
        ReceivedCredentialOffers = listReceivedCredentialOffersResult.Value;
    }

    private async Task AcceptCredentialOffer(CreatedCredentialOffer receivedCredentialOffer)
    {
        var acceptanceResult = await CredentialIssuingService.AcceptCredentialOffer(Agent, receivedCredentialOffer);
        if (acceptanceResult.IsFailed)
        {
            Snackbar.Add(acceptanceResult.Errors.First().Message, Severity.Error);
            return;
        }

        // updates and removes the offer from the list
        await RefreshReceivedCredentialOffers();
    }

}