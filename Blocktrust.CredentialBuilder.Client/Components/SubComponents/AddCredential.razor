@using Blocktrust.CredentialBuilder.Client.Models
@using Blocktrust.CredentialBuilder.Client.Models.Connections
@using Blocktrust.CredentialBuilder.Client.Components.Helpers
@using Blocktrust.CredentialBuilder.Client.Services
@using System.Data.Common
@using Blocktrust.CredentialBuilder.Client.Models.Credentials
@using Blocktrust.CredentialBuilder.Client.Models.Dids
@using Blocktrust.PrismAgentApi.Model
@inject IConnectionService ConnectionService;
@inject ISnackbar Snackbar
@inject IAgentService AgentService;
@inject ICredentialIssuingService CredentialIssuingService;


<div class="pt-5 px-3 pb-3">
@if (_action == EnumCredentialAction.None)
{
    <MudStack>
        <MudText Typo="Typo.subtitle2">Create new credential offer</MudText>
        <div>
            @if (!Agent.LocalDids.Dids.Any(p => p.IsPublished))
            {
                <MudAlert Severity="Severity.Warning">
                    You must first create a DID that will be published on the VDR (blockchain) to issue credentials
                </MudAlert>
            }
            else
            {
                <MudText Typo="Typo.body2">Select Issuer DID</MudText>
                <MudSelect T="LocalDid" ValueChanged="OnSelectDidValueChanged" Value="_selectedLocalDid" ToStringFunc="@_localDidConverter" Label="Issuer DID" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter">
                    @foreach (var localDid in Agent.LocalDids.Dids.Where(p => p.IsPublished))
                    {
                        <MudSelectItem Value="@localDid"/>
                    }
                </MudSelect>
            }
        </div>

        <MudDivider></MudDivider>
        <div>
            @if (!Agent.Connections.Connections.Any())
            {
                <MudAlert Severity="Severity.Warning">You must first connect to the agent who will be the credential holder</MudAlert>
            }
            else
            {
                <MudStack Row="true">
                    <MudText Typo="Typo.body2">Select connection</MudText>
                    <MudIcon Icon="@Icons.Material.Filled.PrivateConnectivity" Size="Size.Small"/>
                </MudStack>
                <MudSelect T="EstablishedConnection" ValueChanged="OnSelectConnectionValueChanged" Value="_selectedConnection" ToStringFunc="@_connectionConverter" Label="Connection to other agent" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter">
                    @foreach (var connection in Agent.Connections.Connections)
                    {
                        <MudSelectItem Value="@connection"/>
                    }
                </MudSelect>
            }
        </div>

        <MudDivider></MudDivider>
        <MudStack>
            <MudStack Row="true">
                <!-- TODO -->
                <MudButton Disabled="!Agent.LocalDids.Dids.Any(p => p.IsPublished) || !Agent.Connections.Connections.Any() || _selectedConnection is null || _selectedLocalDid is null" OnClick="Reset" Variant="Variant.Outlined">Cancel</MudButton>
                <MudSpacer></MudSpacer>
                <MudButton Disabled="!Agent.LocalDids.Dids.Any(p => p.IsPublished) || !Agent.Connections.Connections.Any() || _selectedConnection is null || _selectedLocalDid is null" Variant="Variant.Outlined" OnClick="ContinueWithClaims">Continue</MudButton>
            </MudStack>
        </MudStack>
    </MudStack>
}
else if (_action == EnumCredentialAction.PreparingClaims)
{
    <MudStack>
        @* <MudAlert Severity="Severity.Info">Schemas are not yet supported</MudAlert> *@
        <MudText Typo="Typo.body2">
            <strong>Claims</strong>
        </MudText>
        <MudGrid Spacing="1">
            @foreach (var claim in _claims)
            {
                <MudItem xs="5">
                    <MudText Style="border-width: 1px !important; overflow-wrap: anywhere;" Typo="Typo.body2" Class="border-dotted border-2 mud-border-info grey lighten-5 rounded py-2 px-3">
                        <strong>@claim.Key</strong>
                    </MudText>
                </MudItem>
                <MudItem xs="5">
                    <MudText Style="border-width: 1px !important; overflow-wrap: anywhere;" Class="border-dotted border-2 mud-border-info grey lighten-5 rounded py-2 px-3" Typo="Typo.body2">@claim.Value</MudText>
                </MudItem>
                <MudItem xs="2">
                    <MudIconButton Style="margin-top:-5px" Disabled="_isWaitingForAcceptance" Icon="@Icons.Material.Filled.Delete"></MudIconButton>
                </MudItem>
            }
        </MudGrid>
        @if (_claims.Any())
        {
            <MudDivider/>
        }
        @if (!_isWaitingForAcceptance)
        {
            <MudGrid Spacing="1">
                <MudItem xs="5">
                    <MudTextField Margin="Margin.Dense" @bind-Value="_newClaimKey" Label="Claim Key" Variant="Variant.Filled"></MudTextField>
                </MudItem>
                <MudItem xs="5">
                    <MudTextField Margin="Margin.Dense" @bind-Value="_newClaimValue" Label="Claim Value" Variant="Variant.Filled"></MudTextField>
                </MudItem>
                <MudItem xs="2">
                    <MudIconButton @onclick="AddClaim" Icon="@Icons.Material.Filled.Add"></MudIconButton>
                </MudItem>
            </MudGrid>
            <MudText Class="mt-3" Typo="Typo.body2">
                <strong>Options</strong>
            </MudText>
            <MudCheckBox Checked="true" Disabled="true" Label="Skip manual credential approval after acceptance"></MudCheckBox>
        }
        @if (_isWaitingForAcceptance)
        {
            <MudStack>
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mt-2"/>
                <MudStack Row="true">
                    <MudButton Variant="Variant.Outlined" OnClick="CancelWaitForOfferAcceptance" Size="Size.Small">Cancel</MudButton>
                    <MudSpacer></MudSpacer>
                    <MudText Typo="Typo.body2" Class="mt-1">
                        <em>
                            Waiting for acceptance
                        </em>
                    </MudText>
                </MudStack>
            </MudStack>
        }
        else
        {
            <MudStack>
                <MudStack Row="true">
                    <MudButton OnClick="Reset" Variant="Variant.Outlined">Cancel</MudButton>
                    <MudSpacer></MudSpacer>
                    <MudButton Variant="Variant.Outlined" Disabled="!_claims.Any() || _clickedSend" OnClick="SendCredentialOffer">Send credential offer</MudButton>
                </MudStack>
            </MudStack>
        }
    </MudStack>
}
else if (_action == EnumCredentialAction.AcceptedAndSend)
{
    <MudStack Class="mt-2">
        <MudStack Row="true">
            <MudIcon Color="Color.Success" Icon="@Icons.Material.Filled.Check"></MudIcon>
            <MudText Typo="Typo.body2">Credential issued</MudText>
        </MudStack>
        <div class="ml-9">
            <MudStack Row="true">
                <MudText Typo="Typo.body2">
                    <strong>
                        Issuer
                    </strong>
                </MudText>
                @if (string.IsNullOrEmpty(_credentialIssued.IssuerDid))
                {
                    <MudText Typo="Typo.body2">
                        <em>not provided</em>
                    </MudText>
                }
                else
                {
                    <MudText Typo="Typo.body2">
                        <Ellipsis IsDid="true" IncludeCopyIcon="true" StringContent="@_credentialIssued.IssuerDid"></Ellipsis>
                    </MudText>
                }
            </MudStack>
            <MudStack Row="true">
                <MudText Typo="Typo.body2">
                    <strong>
                        Subject
                    </strong>
                </MudText>
                @if (string.IsNullOrEmpty(_credentialIssued.SubjectDid))
                {
                    <MudText Typo="Typo.body2">
                        <em>not provided</em>
                    </MudText>
                }
                else
                {
                    <MudText Typo="Typo.body2">
                        <Ellipsis IsDid="true" IncludeCopyIcon="true" StringContent="@_credentialIssued.SubjectDid"></Ellipsis>
                    </MudText>
                }
            </MudStack>
            <MudStack Row="true">
                <MudText Typo="Typo.body2">
                    <strong>
                        Created
                    </strong>
                </MudText>
                <MudText Typo="Typo.body2">
                    @_credentialIssued.CreatedAt.ToLocalTime()
                </MudText>
            </MudStack>
@*            @if (!string.IsNullOrEmpty(_credentialIssued.SchemaId))
            {
                <MudStack Row="true">
                    <MudText Typo="Typo.body2">
                        <strong>
                            SchemaId
                        </strong>
                    </MudText>
                    <MudText Typo="Typo.body2">
                        @_credentialIssued.SchemaId
                    </MudText>
                </MudStack>
            }
*@            @if (!_credentialIssued.ValidityPeriod.Equals(0M))
            {
                <MudStack Row="true">
                    <MudText Typo="Typo.body2">
                        <strong>
                            Offer valid until
                        </strong>
                    </MudText>
                    <MudText Typo="Typo.body2">
                        @(_credentialIssued.CreatedAt + TimeSpan.FromSeconds((double)_credentialIssued.ValidityPeriod)).toLongDateString()
                    </MudText>
                </MudStack>
            }
        </div>
        <MudDivider/>
        <MudText Typo="Typo.body2">
            <strong>
                Claims
            </strong>
        </MudText>
        <MudGrid Spacing="1">
            @foreach (var claim in _credentialIssued.Claims)
            {
                <MudItem xs="6">
                    <MudText Style="border-width: 1px !important; overflow-wrap: anywhere;" Typo="Typo.body2" Class="border-dotted border-2 mud-border-info grey lighten-5 rounded py-2 px-3">
                        <strong>@claim.Key</strong>
                    </MudText>
                </MudItem>
                <MudItem xs="6">
                    <MudText Style="border-width: 1px !important; overflow-wrap: anywhere;" Class=" border-dotted border-2 mud-border-info grey lighten-5 rounded py-2 px-3" Typo="Typo.body2">@claim.Value</MudText>
                </MudItem>
            }
        </MudGrid>
        @if (!string.IsNullOrEmpty(_credentialIssued.JwtCredential))
        {
            <MudText Typo="Typo.body2" Class="mt-5">
                <strong>
                    JWT
                </strong>
            </MudText>
            <MudText Style="border-width: 1px !important; overflow-wrap: anywhere; overflow: scroll; max-height: 110px" Typo="Typo.body2" Class="border-dotted border-2 mud-border-info grey lighten-5 rounded py-2 px-3">
                @_credentialIssued.JwtCredential
            </MudText>
        }
        <MudStack Row="true">
            <MudSpacer></MudSpacer>
            <MudButton OnClick="Reset" Variant="Variant.Outlined">Ok</MudButton>
        </MudStack>
    </MudStack>
}
</div>

@code {

    [Parameter]
    public Agent Agent { get; set; }

    string? _holderDidPasted = null;
    LocalDid? _selectedLocalDid = null;
    EstablishedConnection? _selectedConnection = null;
    Func<LocalDid, string?> _localDidConverter = p => (p is not null) ? string.Concat(p?.Did.Substring(0, 16), "...", p?.Did.Substring(p.Did.Length - 6, 6)) : null;
    Dictionary<string, string> _claims = new Dictionary<string, string>();
    string _newClaimKey = "";
    string _newClaimValue = "";
    EnumCredentialAction _action = EnumCredentialAction.None;
    bool _isWaitingForAcceptance = false;
    bool _clickedSend = false;
    Guid? _recordIdWaitingForAcceptance = null;
    CreatedCredentialOffer? _credentialIssued = null;
    CancellationTokenSource _issueCredentialCancellationTokenSource = new CancellationTokenSource();


    [CascadingParameter]
    public AgentComponent Parent { get; set; }

    Func<EstablishedConnection, string?> _connectionConverter = p =>
    {
        if (string.IsNullOrWhiteSpace(p.Label) || p.Label.Equals(Services.ConnectionService.UnnamedConnectionLabel, StringComparison.InvariantCultureIgnoreCase))
        {
            return p.ConnectionId.ToString();
        }
        return p?.Label;
    };


    private void OnSelectDidValueChanged(LocalDid localDid)
    {
        _selectedLocalDid = localDid;
    }

    private void OnSelectConnectionValueChanged(EstablishedConnection connection)
    {
        _selectedConnection = connection;
    }

    private void ContinueWithClaims()
    {
        if (_selectedConnection is null)
        {
            return;
        }
        if (_selectedLocalDid is null)
        {
            return;
        }

        _action = EnumCredentialAction.PreparingClaims;
        _isWaitingForAcceptance = false;
        _recordIdWaitingForAcceptance = null;
    }

    private void AddClaim()
    {
        if (string.IsNullOrWhiteSpace(_newClaimKey) || _claims.ContainsKey(_newClaimKey))
        {
            return;
        }
        if (string.IsNullOrWhiteSpace(_newClaimValue))
        {
            return;
        }
        _claims.Add(_newClaimKey, _newClaimValue);
        _newClaimKey = "";
        _newClaimValue = "";
    }

    private async Task SendCredentialOffer()
    {
        if (!_claims.Any())
        {
            return;
        }
        _clickedSend = true;

        var credentialOfferResult = await CredentialIssuingService.CreateCredentialOffer(Agent, new PreparedCredentialOffer(
            establishedConnection: _selectedConnection!,
            issuerDid: _selectedLocalDid!,
            claims: _claims,
            automaticIssuance: true,
            schemaId: null,
            validityPeriod: null
            ));

        if (credentialOfferResult.IsFailed)
        {
            Snackbar.Add(credentialOfferResult.Errors.First().Message, Severity.Error);
            _clickedSend = false;
            return;
        }

        _isWaitingForAcceptance = true;
        _clickedSend = false;
        StateHasChanged();

        var isParsedAsGuid = Guid.TryParse(credentialOfferResult.Value.RecordId, out var recordId);
        if (!isParsedAsGuid)
        {
            Snackbar.Add("The record Id could not be parsed as GUID", Severity.Error);
            return;
        }
        _recordIdWaitingForAcceptance = recordId;
        _issueCredentialCancellationTokenSource = new CancellationTokenSource();
        CancellationToken cancellationToken = _issueCredentialCancellationTokenSource.Token;
        var acceptanceResult = await CredentialIssuingService.WaitForCredentialOfferAcceptance(Agent, _recordIdWaitingForAcceptance.Value, cancellationToken);
        if (acceptanceResult.IsFailed)
        {
            Snackbar.Add(acceptanceResult.Errors.First().Message, Severity.Error);
            _action = EnumCredentialAction.TimeoutOrFailed;
            return;
        }
        Parent.RefreshState();
        _isWaitingForAcceptance = false;
        _credentialIssued = acceptanceResult.Value;
        _action = EnumCredentialAction.AcceptedAndSend;
    }
    
    private void CancelWaitForOfferAcceptance()
    {
        _issueCredentialCancellationTokenSource.Cancel();
        Reset();
    }

    private void Reset()
    {
        _holderDidPasted = null;
        _selectedLocalDid = null;
        _selectedConnection = null;
        _claims = new Dictionary<string, string>();
        _newClaimKey = "";
        _newClaimValue = "";
        _action = EnumCredentialAction.None;
        _isWaitingForAcceptance = false;
        _recordIdWaitingForAcceptance = null;
        _clickedSend = false;
        _credentialIssued = null;
        _issueCredentialCancellationTokenSource = new CancellationTokenSource();
    }

}