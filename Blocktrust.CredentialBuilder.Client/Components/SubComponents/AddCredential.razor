@using Blocktrust.CredentialBuilder.Client.Models
@using Blocktrust.CredentialBuilder.Client.Models.Connections
@using Blocktrust.CredentialBuilder.Client.Components.Helpers
@using Blocktrust.CredentialBuilder.Client.Services
@using System.Data.Common
@using Blocktrust.CredentialBuilder.Client.Models.Credentials
@using Blocktrust.CredentialBuilder.Client.Models.Dids
@using Blocktrust.PrismAgentApi.Model
@inject IConnectionService ConnectionService;
@inject ISnackbar Snackbar
@inject IAgentService AgentService;
@inject ICredentialIssuingService CredentialIssuingService;


<div class="pt-5 px-3 pb-3">
    @if (_action == EnumCredentialAction.None)
    {
        <MudStack>
            <MudText Typo="Typo.subtitle2">Create new credential offer</MudText>
            <div>
                <MudText Typo="Typo.body2">Select Issuer DID</MudText>
                @if (!Agent.LocalDids.Dids.Any(p => p.IsPublished))
                {
                    <MudAlert Severity="Severity.Warning">
                        You must first create a DID that will be published on the VDR (blockchain) to issue credentials
                    </MudAlert>
                }
                else
                {
                    <MudSelect T="LocalDid" ValueChanged="OnSelectDidValueChanged" Value="_selectedLocalDid" ToStringFunc="@_localDidConverter" Label="Issuer DID" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter">
                        @foreach (var localDid in Agent.LocalDids.Dids.Where(p => p.IsPublished))
                        {
                            <MudSelectItem Value="@localDid"/>
                        }
                    </MudSelect>
                }
            </div>

            <MudDivider></MudDivider>
            <div>
                @if (!Agent.Connections.Connections.Any())
                {
                    <MudAlert Severity="Severity.Warning">You must first connect to the agent who will be the credential holder</MudAlert>
                }
                else
                {
                    <MudText Typo="Typo.body2">Select connection</MudText>
                    <MudSelect T="EstablishedConnection" ValueChanged="OnSelectConnectionValueChanged" Value="_selectedConnection" ToStringFunc="@_connectionConverter" Label="Connection to other agent" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter">
                        @foreach (var connection in Agent.Connections.Connections)
                        {
                            <MudSelectItem Value="@connection"/>
                        }
                    </MudSelect>
                }
            </div>

            <MudDivider></MudDivider>
            <MudStack>
                <MudStack Row="true">
                    <MudButton OnClick="Reset" Variant="Variant.Outlined">Cancel</MudButton>
                    <MudSpacer></MudSpacer>
                    <MudButton Variant="Variant.Outlined" OnClick="ContinueWithClaims">Continue</MudButton>
                </MudStack>
            </MudStack>
        </MudStack>
    }
    else if (_action == EnumCredentialAction.PreparingClaims)
    {
        <MudStack>
            <MudAlert Severity="Severity.Info">Schemas are not yet supported</MudAlert>
            <MudText Typo="Typo.body2">
                <strong>Claims</strong>
            </MudText>
            <MudGrid Spacing="1">
                @foreach (var claim in _claims)
                {
                    <MudItem xs="5">
                        <MudText Style="border-width: 1px !important; overflow-wrap: anywhere;" Typo="Typo.body2" Class="border-dotted border-2 mud-border-info grey lighten-5 rounded py-2 px-3">
                            <strong>@claim.Key</strong>
                        </MudText>
                    </MudItem>
                    <MudItem xs="5">
                        <MudText Style="border-width: 1px !important; overflow-wrap: anywhere;" Class="border-dotted border-2 mud-border-info grey lighten-5 rounded py-2 px-3" Typo="Typo.body2">@claim.Value</MudText>
                    </MudItem>
                    <MudItem xs="2">
                        <MudIconButton Icon="@Icons.Material.Filled.Delete"></MudIconButton>
                    </MudItem>
                }
            </MudGrid>
            @if (_claims.Any())
            {
                <MudDivider/>
            }
            <MudGrid Spacing="1">
                <MudItem xs="5">
                    <MudTextField Margin="Margin.Dense" @bind-Value="_newClaimKey" Label="Claim Key" Variant="Variant.Filled"></MudTextField>
                </MudItem>
                <MudItem xs="5">
                    <MudTextField Margin="Margin.Dense" @bind-Value="_newClaimValue" Label="Claim Value" Variant="Variant.Filled"></MudTextField>
                </MudItem>
                <MudItem xs="2">
                    <MudIconButton @onclick="AddClaim" Icon="@Icons.Material.Filled.Add"></MudIconButton>
                </MudItem>
            </MudGrid>
            <MudText Class="mt-3" Typo="Typo.body2">
                <strong>Options</strong>
            </MudText>
            <MudCheckBox Checked="true" Disabled="true" Label="Skip manual credential approval after acceptance"></MudCheckBox>
            <MudDivider></MudDivider>
            @if (_isWaitingForAcceptance)
            {
                <MudStack>
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mt-2"/>
                    <MudStack Row="true">
                        <MudButton Variant="Variant.Outlined" Disabled="true" Size="Size.Small">Cancel</MudButton>
                        <MudSpacer></MudSpacer>
                        <MudText Typo="Typo.body2">
                            <em>
                                Waiting for accecptance
                            </em>
                        </MudText>
                    </MudStack>
                </MudStack>
            }
            else
            {
                <MudStack>
                    <MudStack Row="true">
                        <MudButton OnClick="Reset" Variant="Variant.Outlined">Cancel</MudButton>
                        <MudSpacer></MudSpacer>
                        <MudButton Variant="Variant.Outlined" OnClick="SendCredentialOffer">Send credential offer</MudButton>
                    </MudStack>
                </MudStack>
            }
        </MudStack>
    }
</div>

@code {

    [Parameter]
    public Agent Agent { get; set; }

    string? _holderDidPasted = null;
    LocalDid? _selectedLocalDid = null;
    EstablishedConnection? _selectedConnection = null;
    Func<LocalDid, string?> _localDidConverter = p => (p is not null) ? string.Concat(p?.Did.Substring(0, 20), "...") : null;
    Dictionary<string, string> _claims = new Dictionary<string, string>();
    string _newClaimKey = "";
    string _newClaimValue = "";
    EnumCredentialAction _action = EnumCredentialAction.None;
    bool _isWaitingForAcceptance = false;
    Guid? _recordIdWaitingForAcceptance = null;

    [CascadingParameter]
    public AgentComponent Parent { get; set; }

    Func<EstablishedConnection, string?> _connectionConverter = p =>
    {
        if (string.IsNullOrWhiteSpace(p.Label) || p.Label.Equals(Services.ConnectionService.UnnamedConnectionLabel, StringComparison.InvariantCultureIgnoreCase))
        {
            return p.ConnectionId.ToString();
        }
        return p?.Label;
    };


    private void OnSelectDidValueChanged(LocalDid localDid)
    {
        _selectedLocalDid = localDid;
    }

    private void OnSelectConnectionValueChanged(EstablishedConnection connection)
    {
        _selectedConnection = connection;
    }

    private void ContinueWithClaims()
    {
        if (_selectedConnection is null)
        {
            return;
        }
        if (_selectedLocalDid is null)
        {
            return;
        }
        
        _action = EnumCredentialAction.PreparingClaims;
        _isWaitingForAcceptance = false;
        _recordIdWaitingForAcceptance = null;
    }

    private void AddClaim()
    {
        if (string.IsNullOrWhiteSpace(_newClaimKey) || _claims.ContainsKey(_newClaimKey))
        {
            return;
        }
        if (string.IsNullOrWhiteSpace(_newClaimValue))
        {
            return;
        }
        _claims.Add(_newClaimKey, _newClaimValue);
        _newClaimKey = "";
        _newClaimValue = "";
    }

    private async Task SendCredentialOffer()
    {
        if (!_claims.Any())
        {
            return;
        }

        // if (!_holderDidPasted!.StartsWith("did:prism:"))
        // {
        //     Snackbar.Add("The provided SubjectDID has to be a PRISM DID", Severity.Error);
        //     return;
        // }

        var credentialOfferResult = await CredentialIssuingService.CreateCredentialOffer(Agent, new PreparedCredentialOffer(
            establishedConnection: _selectedConnection!,
            issuerDid: _selectedLocalDid!,
            claims: _claims,
            automaticIssuance: true,
            schemaId: null,
            validityPeriod: null
            ));

        if (credentialOfferResult.IsFailed)
        {
            Snackbar.Add(credentialOfferResult.Errors.First().Message, Severity.Error);
            return;
        }
        Agent.AddCredentialOffer(credentialOfferResult.Value);
        await AgentService.Save(Agent);
        _isWaitingForAcceptance = true;
        StateHasChanged();

        var isParsedAsGuid = Guid.TryParse(credentialOfferResult.Value.RecordId, out var recordId);
        if (!isParsedAsGuid)
        {
            Snackbar.Add("The record Id could not be parsed as GUID", Severity.Error);
            return;
        }
        _recordIdWaitingForAcceptance = recordId;

        var acceptanceResult = await CredentialIssuingService.WaitForCredentialOfferAcceptance(Agent, _recordIdWaitingForAcceptance.Value, new CancellationToken());
        if (acceptanceResult.IsFailed)
        {
            Snackbar.Add(acceptanceResult.Errors.First().Message, Severity.Error);
            _action = EnumCredentialAction.TimeoutOrFailed;
            return;
        }

        Parent.RefreshState();
        _isWaitingForAcceptance = false;
    }


    private void Reset()
    {
        _holderDidPasted = null;
        _selectedLocalDid = null;
        _selectedConnection = null;
        _claims = new Dictionary<string, string>();
        _newClaimKey = "";
        _newClaimValue = "";
        _action = EnumCredentialAction.None;
        _isWaitingForAcceptance = false;
        _recordIdWaitingForAcceptance = null;
    }

}