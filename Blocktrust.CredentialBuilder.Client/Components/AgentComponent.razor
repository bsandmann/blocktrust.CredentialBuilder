@using Blocktrust.CredentialBuilder.Client.Services
@using Blocktrust.CredentialBuilder.Client.Models
@using Index = Blocktrust.CredentialBuilder.Client.Pages.Index
@using Blocktrust.CredentialBuilder.Client.Components.SubComponents
@using Blocktrust.PrismAgentApi.Model
@inject IConnectionService ConnectionService;
@inject IAgentService AgentService;
@inject IStorageService StorageService;
@inject ISnackbar Snackbar

<MudPaper Class="mr-2 mt-4 pa-3" Style="width: 449px; height: fit-content;">
    <MudStack Row="true">
        <MudText Typo="Typo.h4">@Agent.AgentName</MudText>
        <MudSpacer></MudSpacer>
        <MudIconButton OnClick="DeleteAgent" Icon="@Icons.Material.Filled.Delete"></MudIconButton>
    </MudStack>
    <MudStack Row="true">
        <MudText Typo="Typo.body2">
            <em>@Agent.AgentInstanceUri.AbsoluteUri</em>
        </MudText>
        <MudSpacer></MudSpacer>
        @if (Version is null)
        {
            <MudTooltip Text="Agent is not connected. Reload page to try again">
                <MudIcon Icon="@Icons.Material.Filled.Circle" Size="Size.Small" Color="Color.Error"></MudIcon>
            </MudTooltip>
        }
        else
        {
            <MudStack Row="true">
                <MudTooltip Text="Agent is connected">
                    <MudIcon Icon="@Icons.Material.Filled.Circle" Size="Size.Small" Color="Color.Success"></MudIcon>
                </MudTooltip>
                <MudTooltip Text="The current version-number">
                    <MudText Typo="Typo.body2">
                        <em>@Version</em>
                    </MudText>
                </MudTooltip>
            </MudStack>
        }
    </MudStack>
    <MudExpansionPanels MultiExpansion="true" Class="mt-3" DisableGutters="true">
        <MudExpansionPanel Text="Connections">
            <MudDivider/>
            <CascadingValue Value="this">
                <AddLocalConnection Agent="Agent"/>
            </CascadingValue>
            <MudDivider/>
            <ListLocalConnections Agent="Agent"/>
        </MudExpansionPanel>
        <MudExpansionPanel Text="DIDs">
            <MudDivider/>
            <CascadingValue Value="this">
                <AddLocalDid Agent="Agent"/>
            </CascadingValue>
            <MudDivider/>
            <ListLocaDids Agent="Agent"/>
        </MudExpansionPanel>
    </MudExpansionPanels>
    <MudTabs Outlined="true" Class="mt-3" MinimumTabWidth="141px" Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-1" Centered="true">
        <MudTabPanel Text="Issuer">
            <CascadingValue Value="this">
                <AddCredential Agent="Agent"/>
            </CascadingValue>
        </MudTabPanel>
        <MudTabPanel Text="Holder">
            <ListCredentials Agent="Agent" Title="Credential Offers" CredentialType="IssueCredentialRecordAllOf.ProtocolStateEnum.OfferReceived" TimeSpanOfListingInMinutes="5"/>
            <MudDivider/>
            <ListCredentials Agent="Agent" Title="Credentials" CredentialType="IssueCredentialRecordAllOf.ProtocolStateEnum.CredentialReceived" TimeSpanOfListingInMinutes="5"/>
            <MudDivider/>
            <ListPresentationRequests Agent="Agent" Title="Presentation Requests" TimeSpanOfListingInMinutes="5" PresentationStatus="PresentationStatus.StatusEnum.RequestReceived"/>
            <MudDivider/>
            <ListPresentationRequests Agent="Agent" Title="Presentations shared" TimeSpanOfListingInMinutes="5"/>
        </MudTabPanel>
        <MudTabPanel Text="Verifier">
            <CascadingValue Value="this">
                <AddPresentationRequest Agent="Agent"/>
            </CascadingValue>
        </MudTabPanel>
    </MudTabs>
    <MudStack>


    </MudStack>
</MudPaper>

<style>
.mud-tab {
        color:  white !important;
        background-color: #6f7c83 !important;
}
.mud-tab-active {
        color:  white !important;
        background-color: #37474fff !important;
    }
</style>

@code {

    [Parameter]
    public Agent Agent { get; set; }

    [CascadingParameter]
    public Index Parent { get; set; }

    public string? Version { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var version = await AgentService.GetVersion(Agent);
        if (version.IsFailed)
        {
            Version = null;
        }
        Version = version.Value;
    }

    private async Task DeleteAgent()
    {
        await AgentService.DeleteAgent(Agent);
        Parent.RefreshState();
    }

    public void RefreshState()
    {
        this.StateHasChanged();
    }

}