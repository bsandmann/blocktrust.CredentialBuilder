@using Blocktrust.CredentialBuilder.Client.Models
@using Blocktrust.CredentialBuilder.Client.Models.Connections
@using Blocktrust.CredentialBuilder.Client.Components.Helpers
@using Blocktrust.CredentialBuilder.Client.Services
@using System.Data.Common
@using Blocktrust.CredentialBuilder.Client.Models.Credentials
@using Blocktrust.CredentialBuilder.Client.Models.Dids
@using Blocktrust.PrismAgentApi.Model
@inject IConnectionService ConnectionService;
@inject ISnackbar Snackbar
@inject IAgentService AgentService;


<MudPaper Class="pa-2">
    @if (_action == EnumCredentialAction.None)
    {
        <MudStack>
            <MudText Typo="Typo.subtitle2">Create new credential offer</MudText>
            <MudText Typo="Typo.body2">Select Issuer DID</MudText>
            @if (!Agent.LocalDids.Dids.Any(p => p.IsPublished))
            {
                <MudAlert Severity="Severity.Warning">
                    You must first create a DID that will be published on the VDR (blockchain) to issue credentials
                </MudAlert>
            }
            else
            {
                <MudSelect T="LocalDid" ValueChanged="OnSelectDidValueChanged" Value="_selectedLocalDid" ToStringFunc="@_localDidConverter" Label="Issuer DID" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter">
                    @foreach (var localDid in Agent.LocalDids.Dids.Where(p => p.IsPublished))
                    {
                        <MudSelectItem Value="@localDid"/>
                    }
                </MudSelect>
            }

            <MudDivider></MudDivider>
            @if (!Agent.Connections.Connections.Any())
            {
                <MudAlert Severity="Severity.Warning">You must first connect to the agent who will be the credential holder</MudAlert>
            }
            else
            {
                <MudText Typo="Typo.body2">Select connection</MudText>
                <MudSelect T="EstablishedConnection" ValueChanged="OnSelectConnectionValueChanged" Value="_selectedConnection" ToStringFunc="@_connectionConverter" Label="Connection to other agent" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter">
                    @foreach (var connection in Agent.Connections.Connections)
                    {
                        <MudSelectItem Value="@connection"/>
                    }
                </MudSelect>
            }

            <MudDivider></MudDivider>
            <MudText Typo="Typo.body2">Paste the Subject DID here</MudText>
            <MudAlert Severity="Severity.Info">The Subject DID is the DID which will later hold the credential in its wallet. Since this agent doesn't (and shouldn't) know which DIDs another agent has in its wallet, you have to copy and paste a DID here from another agent.</MudAlert>
            <MudTextField @bind-Value="@_holderDidPasted" Label="Subject DID" Style="font-weight:300;" Variant="Variant.Filled"/>

            <MudDivider></MudDivider>
            <MudStack>
                <MudStack Row="true">
                    <MudButton Variant="Variant.Outlined">Cancel</MudButton>
                    <MudSpacer></MudSpacer>
                    <MudButton Variant="Variant.Outlined" OnClick="ContinueWithClaims">Continue</MudButton>
                </MudStack>
            </MudStack>
        </MudStack>
    }
    else if (_action == EnumCredentialAction.PreparingClaims)
    {
        <MudStack>
            <MudAlert Severity="Severity.Info">Schemas are not yet supported</MudAlert>
            <MudText Typo="Typo.body2">
                <strong>Claims</strong>
            </MudText>
            <MudGrid Spacing="1">
                @foreach (var claim in _claims)
                {
                    <MudItem xs="5">
                        <MudText Typo="Typo.body2" Class="grey lighten-3 rounded pa-3">
                            <strong>@claim.Key</strong>
                        </MudText>
                    </MudItem>
                    <MudItem xs="5">
                        <MudText Class="grey lighten-3 rounded pa-3" Typo="Typo.body2">@claim.Value</MudText>
                    </MudItem>
                    <MudItem xs="2">
                        <MudIconButton Icon="@Icons.Material.Filled.Delete"></MudIconButton>
                    </MudItem>
                }
            </MudGrid>
            @if (_claims.Any())
            {
                <MudDivider/>
            }
            <MudStack Row="true">
                <MudTextField Margin="Margin.Dense" @bind-Value="_newClaimKey" Label="Claim Key" Variant="Variant.Filled"></MudTextField>
                <MudTextField Margin="Margin.Dense" @bind-Value="_newClaimValue" Label="Claim Value" Variant="Variant.Filled"></MudTextField>
                <MudIconButton @onclick="AddClaim" Icon="@Icons.Material.Filled.Add"></MudIconButton>
            </MudStack>
            <MudText Class="mt-3" Typo="Typo.body2">
                <strong>Options</strong>
            </MudText>
            <MudCheckBox Checked="true" Disabled="true" Label="Skip manual credential approval after acceptance"></MudCheckBox>
            <MudDivider></MudDivider>
            <MudStack>
                <MudStack Row="true">
                    <MudButton Variant="Variant.Outlined">Cancel</MudButton>
                    <MudSpacer></MudSpacer>
                    <MudButton Variant="Variant.Outlined" OnClick="SendCredentialOffer">Send credential offer to holder</MudButton>
                </MudStack>
            </MudStack>
        </MudStack>
    }
</MudPaper>

@code {

    [Parameter]
    public Agent Agent { get; set; }

    string? _holderDidPasted = null;
    LocalDid? _selectedLocalDid = null;
    EstablishedConnection? _selectedConnection = null;
    Func<LocalDid, string?> _localDidConverter = p => (p is not null) ? string.Concat(p?.Did.Substring(0, 20), "...") : null;
    Dictionary<string, string> _claims = new Dictionary<string, string>();
    string _newClaimKey = "";
    string _newClaimValue = "";

    Func<EstablishedConnection, string?> _connectionConverter = p =>
    {
        if (string.IsNullOrWhiteSpace(p.Label) || p.Label.Equals(Services.ConnectionService.UnnamedConnectionLabel, StringComparison.InvariantCultureIgnoreCase))
        {
            return p.ConnectionId.ToString();
        }
        return p?.Label;
    };

    EnumCredentialAction _action = EnumCredentialAction.None;


    private void OnSelectDidValueChanged(LocalDid localDid)
    {
        _selectedLocalDid = localDid;
    }

    private void OnSelectConnectionValueChanged(EstablishedConnection connection)
    {
        _selectedConnection = connection;
    }

    private void ContinueWithClaims()
    {
        if (_selectedConnection is null)
        {
            return;
        }
        if (_selectedLocalDid is null)
        {
            return;
        }
        if (string.IsNullOrEmpty(_holderDidPasted))
        {
            return;
        }

        _action = EnumCredentialAction.PreparingClaims;
    }

    private void AddClaim()
    {
        if (string.IsNullOrWhiteSpace(_newClaimKey) || _claims.ContainsKey(_newClaimKey))
        {
            return;
        }
        if (string.IsNullOrWhiteSpace(_newClaimValue))
        {
            return;
        }
        _claims.Add(_newClaimKey, _newClaimValue);
        _newClaimKey = "";
        _newClaimValue = "";
    }

    private void SendCredentialOffer()
    {
        
    }

}