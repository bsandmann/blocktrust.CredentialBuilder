@using Blocktrust.CredentialBuilder.Client.Models
@using Blocktrust.CredentialBuilder.Client.Components.Helpers
@using Blocktrust.CredentialBuilder.Client.Models.Connections
@using Blocktrust.CredentialBuilder.Client.Models.Credentials
@using Blocktrust.CredentialBuilder.Client.Models.Dids
@using Blocktrust.CredentialBuilder.Client.Services
@using Blocktrust.PrismAgentApi.Model
@inject ICredentialIssuingService CredentialIssuingService
@inject ISnackbar Snackbar

<div class="pt-5 px-3 pb-3">
    <MudStack Row="true" Class="mb-3">
        <MudText Typo="Typo.subtitle2">
            @Title <br/>
            <em>(received within the last @TimeSpanOfListingInMinutes minutes)</em>
        </MudText>
        <MudSpacer/>
        <MudIconButton Size="Size.Medium" Icon="@Icons.Material.Filled.Refresh" @onclick="RefreshCredentialList"></MudIconButton>
    </MudStack>
    @foreach (var credential in CredentialList)
    {
        <MudPaper Class="pa-3 mb-2">
            <MudStack>
                <MudStack Row="true">
                    <MudText Typo="Typo.body2">
                        <strong>
                            RecordId
                        </strong>
                    </MudText>
                    <MudText Typo="Typo.body2">
                        @credential.RecordId
                    </MudText>
                </MudStack>
                <MudStack Row="true">
                    <MudText Typo="Typo.body2">
                        <strong>
                            Issuer
                        </strong>
                    </MudText>
                    @if (string.IsNullOrEmpty(credential.IssuerDid))
                    {
                        <MudText Typo="Typo.body2">
                            <em>not provided</em>
                        </MudText>
                    }
                    else
                    {
                        <MudText Typo="Typo.body2">
                            <Ellipsis IsDid="true" IncludeCopyIcon="true" StringContent="@credential.IssuerDid"></Ellipsis>
                        </MudText>
                    }
                </MudStack>
                <MudStack Row="true">
                    <MudText Typo="Typo.body2">
                        <strong>
                            Subject
                        </strong>
                    </MudText>
                    @if (string.IsNullOrEmpty(credential.SubjectDid))
                    {
                        <MudText Typo="Typo.body2">
                            <em>not provided</em>
                        </MudText>
                    }
                    else
                    {
                        <MudText Typo="Typo.body2">
                            <Ellipsis IsDid="true" IncludeCopyIcon="true" StringContent="@credential.SubjectDid"></Ellipsis>
                        </MudText>
                    }
                </MudStack>
                <MudStack Row="true">
                    <MudText Typo="Typo.body2">
                        <strong>
                            Created
                        </strong>
                    </MudText>
                    <MudText Typo="Typo.body2">
                        @credential.CreatedAt.ToLocalTime()
                    </MudText>
                </MudStack>
                @if (!string.IsNullOrEmpty(credential.SchemaId))
                {
                    <MudStack Row="true">
                        <MudText Typo="Typo.body2">
                            <strong>
                                SchemaId
                            </strong>
                        </MudText>
                        <MudText Typo="Typo.body2">
                            @credential.SchemaId
                        </MudText>
                    </MudStack>
                }
                @if (!credential.ValidityPeriod.Equals(0M))
                {
                    <MudStack Row="true">
                        <MudText Typo="Typo.body2">
                            <strong>
                                Offer valid until
                            </strong>
                        </MudText>
                        <MudText Typo="Typo.body2">
                            @(credential.CreatedAt + TimeSpan.FromSeconds((double)credential.ValidityPeriod)).toLongDateString()
                        </MudText>
                    </MudStack>
                }
                <MudDivider/>
                <MudText Typo="Typo.body2">
                    <strong>
                        Claims
                    </strong>
                </MudText>
                <MudGrid Spacing="1">
                    @foreach (var claim in credential.Claims)
                    {
                        <MudItem xs="6">
                            <MudText Style="border-width: 1px !important; overflow-wrap: anywhere;" Typo="Typo.body2" Class="border-dotted border-2 mud-border-info grey lighten-5 rounded py-2 px-3">
                                <strong>@claim.Key</strong>
                            </MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <MudText Style="border-width: 1px !important; overflow-wrap: anywhere;" Class=" border-dotted border-2 mud-border-info grey lighten-5 rounded py-2 px-3" Typo="Typo.body2">@claim.Value</MudText>
                        </MudItem>
                    }
                </MudGrid>
                @if (!string.IsNullOrEmpty(credential.JwtCredential))
                {
                    <MudText Typo="Typo.body2" Class="mt-5">
                        <strong>
                            JWT
                        </strong>
                    </MudText>
                    <MudText Style="border-width: 1px !important; overflow-wrap: anywhere; overflow: scroll; max-height: 110px" Typo="Typo.body2" Class="border-dotted border-2 mud-border-info grey lighten-5 rounded py-2 px-3">
                        @credential.JwtCredential
                    </MudText>
                }
                @if (CredentialType == IssueCredentialRecord.ProtocolStateEnum.OfferReceived)
                {
                    <MudDivider/>
                    <MudSelect T="LocalDid" ValueChanged="OnSelectDidValueChanged" Value="_selectedLocalDid" ToStringFunc="@_localDidConverter" Label="Subject DID" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter">
                        @foreach (var localDid in Agent.LocalDids.Dids)
                        {
                            <MudSelectItem Value="@localDid"/>
                        }
                    </MudSelect>
                    <MudStack Row="true">
                        <MudSpacer/>
                        <MudButton Variant="Variant.Outlined" OnClick="() => AcceptCredentialOffer(credential)">Accept Offer</MudButton>
                    </MudStack>
                }
            </MudStack>
        </MudPaper>
    }
</div>

@code {

    [Parameter]
    public Agent Agent { get; set; }

    [Parameter]
    public IssueCredentialRecord.ProtocolStateEnum CredentialType { get; set; }
    
    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public int? TimeSpanOfListingInMinutes { get; set; }
    
    LocalDid? _selectedLocalDid = null;

    public List<CreatedCredentialOffer> CredentialList { get; set; } = new List<CreatedCredentialOffer>();
    
    Func<LocalDid, string?> _localDidConverter = p => (p is not null) ? string.Concat(p?.Did.Substring(0, 20), "...") : null;
    
    private async Task RefreshCredentialList()
    {
        var listCredentialsResult = await CredentialIssuingService.GetListCredentials(Agent, CredentialType, TimeSpanOfListingInMinutes is null ? null : TimeSpan.FromMinutes(TimeSpanOfListingInMinutes.Value));
        if (listCredentialsResult.IsFailed)
        {
            Snackbar.Add(listCredentialsResult.Errors.First().Message, Severity.Error);
            return;
        }
        CredentialList = listCredentialsResult.Value;
    }

    private async Task AcceptCredentialOffer(CreatedCredentialOffer receivedCredentialOffer)
    {
        if (_selectedLocalDid is null || string.IsNullOrEmpty(_selectedLocalDid.Did))
        {
            return;
        }
        
        var acceptanceResult = await CredentialIssuingService.AcceptCredentialOffer(Agent, receivedCredentialOffer, _selectedLocalDid);
        if (acceptanceResult.IsFailed)
        {
            Snackbar.Add(acceptanceResult.Errors.First().Message, Severity.Error);
            return;
        }

    // updates and removes the offer from the list
        await RefreshCredentialList();
    }
    
    private void OnSelectDidValueChanged(LocalDid localDid)
    {
        _selectedLocalDid = localDid;
    }

}